" Fix mouse scrolling
set mouse=a

" Use the current terminal theme for Vim colors
if $USE_LIGHT_BG == "true"
  set background=light
else
  set background=dark
endif
colorscheme customdisco
" colorscheme disco

" Clear search highlight
nnoremap <silent> <leader>h :nohlsearch<CR>

" Search for highlighted word
vnoremap // y/\V<C-R>"<CR>
vnoremap \\ y:Ag -Q '<C-R>"'<CR>

" Run interactive
nnoremap <leader>r :new\|:te<CR>

" Spawn rails console
nnoremap <leader>c :new\|:call termopen('rails c')\|:startinsert<CR>

" Remote pry debugging
nnoremap <leader>p :new\|:call termopen('pry-remote')\|:startinsert<CR>

" Open git status
nnoremap <leader>gs :Gstatus<CR>

" Save current file
map <Leader>w :w<CR>
map <silent> <leader>gr :!chrome-cli reload<cr><cr>

" Notes
" map <Leader>n :new .notes<CR>
" autocmd BufRead,BufNewFile .notes setlocal ft=markdown nospell
" autocmd BufRead,BufNewFile .notes setlocal ft=markdown
let g:pad#dir = "~/Library/Mobile Documents/27N4MQEA55~pro~writer/Documents"
let g:pad#default_file_extension = ".md"

" vim-test config
let test#strategy = "neovim"
let g:test#javascript#jasmine#file_pattern = '\v^ahdslfkjhaldfkjhlspec/.*adsfklhjasfdspec\.(js|jsx|coffee)$'
let g:test#javascript#jest#file_pattern = '\v^spec/.*spec\.(js|jsx|coffee)$'

" Rubocop and eslint autofix
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\   'ruby': ['rubocop'],
\}
map <leader>f :ALEFix<CR>
" Allow picking the fixer in each directory
set exrc

nnoremap <leader>d :ALEGoToDefinition<CR>

" Show rubocop rule explanation
let g:ale_ruby_rubocop_options = '--display-style-guide'
" mnemonic for go (to) ale detail
nnoremap <leader>gad :ALEDetail<CR>

" Deoplete
let g:deoplete#enable_at_startup = 1

" Neosnippets
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
imap <expr><TAB>
\ pumvisible() ? "\<C-n>" :
\ neosnippet#expandable_or_jumpable() ?
\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" Open files from quickfix as ctrl-p does
let g:qfenter_keymap = {}
let g:qfenter_keymap.vopen = ['<C-v>']
let g:qfenter_keymap.hopen = ['<C-CR>', '<C-s>', '<C-x>']
let g:qfenter_keymap.topen = ['<C-t>']

let g:user_emmet_settings = {
\  'javascript' : {
\      'extends' : 'jsx',
\  },
\}

" Nerdtree stuff
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Folding
set foldmethod=syntax
set foldnestmax=10
set nofoldenable
set foldlevel=2

" Min width and height
" https://www.destroyallsoftware.com/file-navigation-in-vim.html
set winwidth=87
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=5
set winminheight=5
set winheight=30

